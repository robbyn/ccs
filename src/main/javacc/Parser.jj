options {
    STATIC = false;
    IGNORE_CASE = false;
}

PARSER_BEGIN(Parser)
package cfpl.parser;
import cfpl.compiler.Compiler;
import cfpl.compiler.Type;
import cfpl.compiler.Strings;
import org.tastefuljava.classfile.Label;
import org.tastefuljava.classfile.CodeSegment;

public class Parser extends Compiler {
    public void parse() throws ParseException {
        input();
    }
}
PARSER_END(Parser)

<DEFAULT,NOT_BOL> SKIP : {
    < " " | "\t" >
}

// Comments
<DEFAULT> SKIP: {
    < "*" (~["\r", "\n"])* ("\r\n" | "\r" | "\n" ) >
}

<DEFAULT,NOT_BOL> TOKEN : {
    < EOL: "\r\n" | "\r" | "\n"  >: DEFAULT
}

// Keywords
<DEFAULT,NOT_BOL> TOKEN : {
    < VAR: "VAR" >: NOT_BOL
    | < AS: "AS" >: NOT_BOL
    | <INT: "INT">: NOT_BOL
    | <BOOL:"BOOL">: NOT_BOL
    | <FLOAT:"FLOAT">: NOT_BOL
    | <CHAR:"CHAR">: NOT_BOL
    | < START: "START" >: NOT_BOL
    | < STOP: "STOP" >: NOT_BOL
    | < OUTPUT: "OUTPUT" >: NOT_BOL
    | <IF: "IF">: NOT_BOL
    | <ELSE: "ELSE">: NOT_BOL
    | <WHILE: "WHILE">: NOT_BOL
    | <AND: "AND">: NOT_BOL
    | <OR: "OR">: NOT_BOL
    | <NOT: "NOT">: NOT_BOL
}

// Specials
<DEFAULT,NOT_BOL> TOKEN : {
    < EQUALS: "=" >: NOT_BOL
    | < COLON: ":" >: NOT_BOL
    | <LPAR: "(">: NOT_BOL
    |<RPAR: ")">: NOT_BOL
}

// Operators
<DEFAULT,NOT_BOL> TOKEN: {
    < PLUS : "+" >: NOT_BOL
    |< MINUS :"-" >: NOT_BOL
    |< MUL: "*" >: NOT_BOL
    |< DIV: "/" >: NOT_BOL
    |< MOD: "%" >: NOT_BOL
    |< COMM: ",">: NOT_BOL
    |<LT: "<">: NOT_BOL
    |<GT: ">">: NOT_BOL
    |<LE: "<=">: NOT_BOL
    |<GE: ">=">: NOT_BOL
    |<EQ: "==">: NOT_BOL
    |<NE: "<>">: NOT_BOL
    |<CAT: "&">: NOT_BOL
}

// Name
<DEFAULT,NOT_BOL> TOKEN: {
    < NAME: <LETTER>(<LETTER>|<DIGIT>)* >: NOT_BOL
    | < #LETTER: ["a"-"z", "A"-"Z", "_"] >
    | < #DIGIT: ["0"-"9"] >
}

// Literals
<DEFAULT,NOT_BOL> TOKEN: {
    < INT_VALUE: (<DIGIT>)+ >: NOT_BOL
    | < FLOAT_VALUE: <INT_VALUE> "." (<DIGIT>)* | "." (<DIGIT>)+ >: NOT_BOL
    | < STRING_VALUE : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >: NOT_BOL
}

void input(): {} {
    (declaration() (<EOL>)+)* 
    body() (<EOL>)*
    <EOF>
}

void declaration(): {Type t;}
{
    (<VAR> varDeclaration() (<COMM> varDeclaration())* <AS> t=type())
    { declareAllVars(t); }
}

void varDeclaration():
    { Token n; CodeSegment seg = null; Type t = null; }
{
    ( n=<NAME> (<EQUALS> { openSegment(); } t=expression() { seg = closeSegment(); })? )
    {
        if (seg == null) {
            addVar(n.image, n.beginLine, n.beginColumn);
        } else {
            addVar(n.image, n.beginLine, n.beginColumn, seg, t);
        }
    }
}

Type type(): {Type result;} {
    (
        <INT> { result = Type.INT; }
        | <FLOAT> { result = Type.FLOAT; }
        | <BOOL> { result = Type.BOOL; }
        | <CHAR> { result = Type.CHAR; }
    )
    { return result; }
}

void body(): {} {
    <START> (<EOL>)+
    (statement())*
    <STOP>
}

void statement(): {} {
    assignment()
    | ifStatement()
    | whileStatement()
    | output()
}

void assignment(): {Token n; Type t;} { n=<NAME> <EQUALS> t=expression() (<EOL>)+
    {storeVar(t,n.image);}
}

void ifStatement(): {Label l; Type t;} {
    <IF> <LPAR> t=expression() <RPAR> {l=startIf(t);}  (<EOL>)+ body() (<EOL>)+
    (<ELSE> {l=startElse(l);}  (<EOL>)+ body() (<EOL>)+)? {endIf(l);}
}

void whileStatement(): {Label ls,le; Type t;} {
    <WHILE> {ls=startWhile();} <LPAR> t=expression() <RPAR>  {le=whileCond(t);}
     (<EOL>)+ body() (<EOL>)+ {endWhile(ls,le);}
}

void output(): { Type t; } {
    <OUTPUT> <COLON> t=expression() {output(t);} (<EOL>)+
}

Type expression(): {Token op; Type t,t2;} {
    ( t=comparison() (LOOKAHEAD(2) op=logicalOp() {startOp2(t);} t2=comparison() { t=endOp2(op.image,t2); })* )
    { return t; }
}

Token logicalOp(): {Token t;} {
    (t=<AND> | t=<OR>)
    { return t; }
}

Type comparison(): {Token op; Type t,t2;} {
    (
        t=simpleExpression()
        (LOOKAHEAD(2) op=comparisonOp() {startOp2(t);} t2=simpleExpression() { t=endOp2(op.image,t2); } )?
    )
    { return t; }
}

Token comparisonOp(): {Token t;} {
    ( t=<LT> | t=<GT> | t=<LE> | t=<GE> | t=<EQ> | t=<NE> )
    {return t;}
}

Type simpleExpression(): {Token op; Type t,t2;} {
    ( t=term() (LOOKAHEAD(2) op=addOp() {startOp2(t);} t2=term() { t=endOp2(op.image,t2); })* )
    { return t; }
}

Token addOp(): {Token t;} {
    ( t=<PLUS> | t=<MINUS> | t=<CAT> )
    { return t; }
}

Type term(): {Token op; Type t,t2;} {
    ( t=factor() (LOOKAHEAD(2) op=mulOp() {startOp2(t);} t2=factor() { t=endOp2(op.image,t2); } )* )
    { return t; }
}

Token mulOp(): {Token t;} {
    ( t=<MUL> | t=<DIV> | t=<MOD> )
    { return t; }
}

Type factor(): {boolean neg = false; Type t; Token n; } {
    (
        (<PLUS>|<MINUS> {neg=!neg;}) t=factor() { if (neg) neg(t); }
        | <LPAR> t=expression() <RPAR>
        | <NOT> t=expression()
        | n=<NAME> (<LPAR> {startCall();} (LOOKAHEAD(2) actualArg() (<COMM> actualArg())*)? <RPAR> {t=endCall(n.image);}| { t=loadVar(n.image); })
        | t=literalValue()
    )
    { return t; }
}

Type literalValue(): { Token t; Type result; } {
    (
        t=<INT_VALUE> { literalInt(t.image); result = Type.INT; }
        | t=<FLOAT_VALUE> { literalInt(t.image); result = Type.FLOAT; }
        | t=<STRING_VALUE> { literalString(t.image); result = Type.STRING; }
    )
    { return result; }
}

void actualArg(): {Type t;} {
    {startArg();}
    t=expression()
    {endArg(t);}
}
